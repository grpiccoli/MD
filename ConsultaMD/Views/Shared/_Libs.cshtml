@model (List<string>, string)

@using ConsultaMD.Services

@{
    var style = $"{Model.Item2}Styles";
    var script = $"{Model.Item2}Scripts";
    bool dev = true;
    var pageName = ViewContext.RouteData.Values.ContainsKey("action") ?
        ViewContext.RouteData.Values["action"].ToString() :
        ViewContext.RouteData.Values.ContainsKey("page") ?
        ViewContext.RouteData.Values["page"].ToString().Split("/").Last() :
        null;
    Model.Item1.Add(pageName);
    <environment exclude="Development">
        @{
            dev = false;
        }
    </environment>
    foreach (var lib in Model.Item1)
    {
        var bundles = Bundler.GetBundles(lib);
        var continuar = false;
        if (bundles != null) { foreach (var bundle in bundles)
        {
            var file = bundle.OutputFileName.Replace("wwwroot", "~");
            if (file.Contains(".css"))
            {
                if (dev)
                {
                    foreach (var input in bundle.InputFiles)
                    {
                        this.Block(@<link href="@input.Insert(0, "~/")" rel="stylesheet" asp-append-version="true" />, style);
                    }
                }
                else
                {
                    this.Block(@<link href="@file" rel="stylesheet" asp-append-version="true" />, style);
                }
            }
            else
            {
                if (dev)
                {
                    foreach (var input in bundle.InputFiles)
                    {
                        this.Block(@<script src="@input.Insert(0, "~/")" asp-append-version="true"></script>, script);
                    }
                }
                else
                {
                    this.Block(@<script src="@file" asp-append-version="true"></script>, script);
                }
            }
            continuar = true;
        }}
        if (continuar) { continue;}
        var l = Libman.GetLibs(lib);
        if (l != null) { foreach (var file in l.Files)
        {
            if (dev)
            {
                if (file.Contains(".css"))
                {
                    this.Block(@<link href="@($"{l.Destination.Replace("wwwroot", "")}{file}")" rel="stylesheet" />, style);
                }
                else if (file.Contains(".js"))
                {
                    this.Block(@<script src="@($"{l.Destination.Replace("wwwroot", "")}{file}")"></script>, script);
                }
            }
            else
            {
                var url = "unpkg.com";
                switch (l.Provider)
                {
                    case "cdnjs":
                    l.Library = l.Library.Replace("@", "/");
                    url = "cdnjs.cloudflare.com/ajax/libs";
                    break;
                    case "":
                    default:
                    l.Provider = "unpkg";
                    break;
                }
                if (file.Contains(".css"))
                {
                    this.Block(@<link href="@($"{Context.Request.Scheme}://{url}/{l.Library}/{file}")" rel="stylesheet"
                                  asp-fallback-href="@($"{l.Destination.Replace("wwwroot", "")}{file}")"
                                  asp-subresource-integrity-href="@($"{l.Destination.Replace("wwwroot", "")}{file}")" />, style);
                }
                else if (file.Contains(".js"))
                {
                    this.Block(@<script src="@($"{Context.Request.Scheme}://{url}/{l.Library}/{file}")"
                                    asp-fallback-src="@($"{l.Destination.Replace("wwwroot", "")}{file}")"
                                    asp-subresource-integrity-src="@($"{l.Destination.Replace("wwwroot", "")}{file}")"></script>, script);
                }
            }
        }}
    }
}