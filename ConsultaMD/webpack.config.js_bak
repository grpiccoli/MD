const path = require('path');
const webpack = require('webpack');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
//const CompressionPlugin = require('compression-webpack-plugin');
//const HtmlWebpackPlugin = require('html-webpack-plugin');
const { CleanWebpackPlugin } = require("clean-webpack-plugin");
const { TsConfigPathsPlugin } = require('awesome-typescript-loader');
//var WebpackNotifierPlugin = require("webpack-notifier");
//var BrowserSyncPlugin = require("browser-sync-webpack-plugin");
const fs = require("fs");
const nodeExternals = require('webpack-node-externals');

module.exports = (argv = {}) => {
    const isDev = !(argv !== null && argv.mode === 'production');
    const config = {
        mode: argv !== null ? argv.mode : 'development',
        entry: {
            login: path.resolve(__dirname, './src/pages/login.ts'),
            validation: path.resolve(__dirname, './src/pages/validation.ts'),
            splash: path.resolve(__dirname, './src/pages/splash.ts'),
            main: path.resolve(__dirname, './src/pages/main.ts')
        },
        output: {
            path: path.resolve(__dirname, './wwwroot/dist'),
            filename: '[name].[contenthash].js',
            publicPath: "/dist/"
        },
        //target: 'node',
        //externals: [nodeExternals({
        //    whitelist: ['webpack', 'jquery']
        //})],
        plugins: [
            function () {
                this.plugin("done", function (stats) {
                    var wpPath = path.join(__dirname, "./src");
                    if (fs.existsSync(wpPath) === false) {
                        fs.mkdirSync(wpPath);
                    }
                    fs.writeFileSync(
                        path.join(wpPath, "stats.json"),
                        JSON.stringify(stats.toJson())
                    );
                });
            },
            new CleanWebpackPlugin(),
            new MiniCssExtractPlugin({
                fileName: '[name].[contenthash].css'
            }),
            //new WebpackNotifierPlugin(),
            //new BrowserSyncPlugin(),
            //new TsConfigPathsPlugin(),
            //new CompressionPlugin({
            //    filename: '[path].gz[query]',
            //    algorithm: 'gzip',
            //    test: /\.js$|\.css$|\.html$|\.eot?.+$|\.ttf?.+$|\.woff?.+$|\.svg?.+$/,
            //    threshold: 10240,
            //    minRatio: 0.8
            //}),
            //new HtmlWebpackPlugin({
            //    template: 'Views/Shared/_LayoutTemplate.cshtml',
            //    filename: '../../Views/Shared/_Layout.cshtml', //the output root here is /wwwroot/dist so we ../../      
            //    inject: false
            //}),
            new webpack.HashedModuleIdsPlugin()
        ],
        resolve: {
            alias: {
                globalize$: path.resolve(__dirname, "node_modules/globalize/dist/globalize.js"),
                globalize: path.resolve(__dirname, "node_modules/globalize/dist/globalize.js"),
                cldr$: path.resolve(__dirname, "node_modules/cldrjs/dist/cldr.js"),
                cldr: path.resolve(__dirname, "node_modules/cldrjs/dist/cldr")
            },
            extensions: [".ts", ".scss", ".js", ".json", ".css"],
            modules: ['node_modules']
        },
        //resolveLoader: {
        //    alias: {
        //        globalize$: path.resolve(__dirname, "node_modules/globalize/dist/globalize.js"),
        //        globalize: path.resolve(__dirname, "node_modules/globalize/dist/globalize.js"),
        //        cldr$: path.resolve(__dirname, "node_modules/cldrjs/dist/cldr.js"),
        //        cldr: path.resolve(__dirname, "node_modules/cldrjs/dist/cldr")
        //    }
        //},
        module: {
            rules: [
                {
                    test: /\.tsx?$/,
                    use: 'ts-loader',
                    exclude: /node_modules/
                },
                {
                    enforce: "pre",
                    test: /\.js$/,
                    exclude: /node_modules/,
                    use: [
                        "babel-loader",
                        "source-map-loader"
                    ]
                },
                {
                    test: /\.s(a|c)ss$/,
                    loader: [
                        MiniCssExtractPlugin.loader,
                        'css-loader',
                        'sass-loader'
                    ]
                },
                {
                    test: /\.(png|jpg|gif|woff|woff2|eot|ttf|svg)$/,
                    loader: 'file-loader',
                    options: {
                        name: '[name].[hash].[ext]',
                        outputPath: 'assets/'
                    }
                }
            ]
        },
        optimization: {
            minimize: true,
            splitChunks: {
                cacheGroups: {
                    commons: {
                        name: 'commons',
                        chunks: "initial",
                        minChunks: 2
                    },
                    vendor: {
                        maxInitialRequests: 5,
                        minSize: 0,
                        test: /[\\/]node_modules[\\/]/,
                        name(module) {
                            // get the name. E.g. node_modules/packageName/not/this/part.js
                            // or node_modules/packageName
                            const packageName = module.context.match(/[\\/]node_modules[\\/](.*?)([\\/]|$)/)[1];
                            // npm package names are URL-safe, but some servers don't like @ symbols
                            return `${packageName}`;
                        },
                        chunks: "all"
                    }
                }
            }
        }
    };
    return config;
};