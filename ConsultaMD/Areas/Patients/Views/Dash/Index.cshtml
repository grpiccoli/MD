@model DashVM

@{
    ViewData["Title"] = "Dashboard";
}

@section Styles{
    <style>
        .choices {
            width: 100%;
        }
    </style>
}

<partial name="_LO_Libs" model='new List<string> { "choices.js" }' />

<partial name="_DashNav" model='"index"' />

<form class="form-inline">
    <div class="input-group">
        <div class="input-group-prepend">
            <div class="input-group-text">
                <select class="form-control" id="locality" multiple></select>
            </div>
        </div>
        <select class="form-control" id="search" multiple></select>
    </div>
</form>

<div class="w-100" id="map" style="height:275px;"></div>

<partial name="_ValidationScriptsPartial" />

@section ScripTop{
    <script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDkCLRdkB6VyOXs-Uz_MFJ8Ym9Ji1Xp3rA&language=es&region=CL"></script>
}

@section Scripts{
    <script>
        function loadData(values, event, boolpsmb) {
            psmb.disable();
            variables.disable();
            if (semaforo) tl.disable();
            var temps = [];
            var requests = [];
            var tags = [];
            var names = [];
            //var tag, area tag, var name, area name, group value
            $.each(values, function (_i, e) {
                var x = boolpsmb ? [e.value, event.value, e.label, event.label, e.groupId === 2 ? "fito" : "graph"] :
                    [event.value, e.value, event.label, e.label, event.groupValue === "Fitoplancton" ? "fito" : "graph"];
                tags.push(x[0] + "_" + x[1]);
                names.push(x[2] + " " + x[3]);
                var d = $.Deferred();
                requests.push(d.promise());
                var url = "/ambiental/" + x[4] + "data?area=" + x[1] + "&var=" + x[0] + "&start=" + start + "&end=" + end;
                console.log(url);
                $.getJSON(url, function (data) {
                    temps.push(data);
                    d.resolve();
                });
            });
            $.when.apply(null, requests).done(function () {
                if (temps.length !== 0)
                    $.each(chart.data, function (j) {
                        for (var i = 0; i < temps.length; i++) {
                            chart.data[j][tags[i]] = temps[i][j][tags[i]];
                        }
                    });
                for (var i = 0; i < temps.length; i++) {
                    series[tags[i]] = chart.series.push(new am4charts.LineSeries());
                    series[tags[i]].dataFields.valueY = tags[i];
                    series[tags[i]].dataFields.dateX = "date";
                    series[tags[i]].name = names[i];
                    series[tags[i]].tooltipText = "{name}: [bold]{valueY}[/]";
                    series[tags[i]].tooltip.pointerOrientation = "vertical";
                }
                chart.invalidateData();
                psmb.enable();
                variables.enable();
                if (semaforo) tl.enable();
            });
        }

        const epsmb = document.getElementById('locality');
        epsmb.addEventListener('addItem', function (event) {
            loadData(variables.getValue(), event.detail, 1);
            if (polygons[event.detail.value] !== undefined && event !== undefined)
                google.maps.event.trigger(polygons[event.detail.value], 'click', {});
        }, false);
        epsmb.addEventListener('removeItem', function (event) {
            $.each(variables.getValue(true), function (_i, e) {
                name = e + "_" + event.detail.value;
                chart.series.removeIndex(chart.series.indexOf(series[name])).dispose();
            });
            if (event !== undefined)
                google.maps.event.trigger(polygons[event.detail.value], 'click', {});
        }, false);
        const psmb = new Choices(epsmb, {
            maxItemCount: 10,
            removeItemButton: true,
            duplicateItemsAllowed: false,
            paste: false,
            searchResultLimit: 10,
            shouldSort: false,
            placeholderValue: "Seleccione áreas",
            searchPlaceholderValue: "Buscar datos",
            loadingText: 'Cargando...',
            noResultsText: 'Sin resultados',
            noChoicesText: 'Sin opciones a elegir',
            itemSelectText: 'Presione para seleccionar',
            maxItemText: (maxItemCount) => {
                return `Máximo ${maxItemCount} valores`;
            },
            fuseOptions: {
                include: 'score'
            }
        }).ajax(
            function (callback) {
                fetch('/ambiental/psmblist')
                    .then(function (response) {
                        response.json().then(function (data) {
                            callback(data, "value", "label", false);
                        });
                    })
                    .catch(function (error) {
                        console.error(error);
                    });
            });

        function Area(array) {
    return parseFloat(google.maps.geometry.spherical.computeArea(array) / 10000).toFixed(2);
}
var addListenerOnPolygon = function (polygon) {
    var selected = 'red';
    google.maps.event.addListener(polygon, 'click', function (e) {
        if ($.isEmptyObject(e)) {
            psmb.getValue(true).includes(this.zIndex.toString()) ?
                this.setOptions({ fillColor: selected, strokeColor: selected }) :
                this.setOptions({ fillColor: undefined, strokeColor: undefined });
        } else {
            if (psmb.getValue(true).includes(this.zIndex.toString())) {
                this.setOptions({ fillColor: undefined, strokeColor: undefined });
                psmb.removeActiveItemsByValue(this.zIndex.toString());
            } else {
                this.setOptions({ fillColor: selected, strokeColor: selected });
                psmb.setChoiceByValue(this.zIndex.toString());
            }
        }
    });
};
function getBounds(positions) {
    var bounds = new google.maps.LatLngBounds();
    if (Array.isArray(positions[0])) {
        $.each(positions, function (_c, position) {
            $.each(position, function (_c, p) {
                bounds.extend(p);
            });
        });
    } else {
        $.each(positions, function (_c, position) {
            bounds.extend(position);
        });
    }
    return bounds;
}
var map = new google.maps.Map(document.getElementById('map'), {
    mapTypeId: 'terrain'
});
var infowindow = new google.maps.InfoWindow({
    size: new google.maps.Size(150, 50)
});
var polygons = {};
var markers = [];
window.onload = function initMap() {
    $.getJSON("/ambiental/mapdata", function getData(data) {
        var bounds = new google.maps.LatLngBounds();
        $.each(data.slice(0, 3), function (_i, dato) {
            $.each(dato.position, function (_c, position) {
                bounds.extend(position);
            });
        });
        map.fitBounds(bounds);
        map.setCenter(bounds.getCenter());
        $.each(data, function (i, dato) {
            var consessionPolygon = new google.maps.Polygon({
                paths: dato.position,
                zIndex: dato.id
            });
            addListenerOnPolygon(consessionPolygon);
            polygons[dato.id] = consessionPolygon;
            marker = new google.maps.Marker({
                position: getBounds(dato.position).getCenter(),
                title: dato.name + " " + dato.id
            });
            google.maps.event.addListener(marker, 'click', (function (marker, _m) {
                return function () {
                    var content = '<h4>' + dato.name + '</h4>' + '<table>' + '<tr><th>Código</th><td align="right">' + dato.id + '</td></tr>';
                    if (dato.comuna !== undefined)
                        content += '<tr><th>Comuna</th><td align="right">' + dato.comuna + '</td></tr>';
                    if (dato.provincia !== undefined)
                        content += '<tr><th>Provincia</th><td align="right">' + dato.provincia + '</td></tr>';
                    content += '<tr><th>Región</th><td align="right">' + dato.region + '</td></tr>' +
                        '<tr><th>Área (ha)</th><td align="right">' + Area(consessionPolygon.getPath().getArray()) + '</td></tr>' +
                        '<tr><th>Fuentes</th><td></td></tr>' +
                        '<tr><td>Sernapesca</td><td align="right"><a target="_blank" href="https://www.sernapesca.cl"><img src="../images/ico/sernapesca.svg" height="30" /></a></td></tr>' +
                        '<tr><td>PER Mitilidos</td><td align="right"><a target="_blank" href="https://www.mejillondechile.cl/"><img src="../images/ico/mejillondechile.min.png" height="30" /></a></td></tr>' +
                        '<tr><td>Subpesca</td><td align="right"><a target="_blank" href="https://www.subpesca.cl"><img src="../images/ico/subpesca.png" height="30" /></a></td></tr>';
                    infowindow.setContent(content);
                    infowindow.open(map, marker);
                    map.setCenter(marker.getPosition());
                };
            })(marker, i));
            markers.push(marker);
            consessionPolygon.setMap(map);
        });
        var markerCluster = new MarkerClusterer(map, markers, { imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' });
        google.maps.event.trigger(polygons[1], 'click', {});
    });
};
    </script>
}