// <auto-generated />
using System;
using ConsultaMD.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ConsultaMD.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200311061852_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ConsultaMD.Models.Entities.Agenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgendaEventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgendaEventId");

                    b.ToTable("Agenda");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.AgendaEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int>("MediumDoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MediumDoctorId");

                    b.ToTable("AgendaEvents");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("MailConfirmationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MemberSince")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PhoneConfirmationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.AreaCode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AreaCodes");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.AreaCodeProvince", b =>
                {
                    b.Property<int>("AreaCodeId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("AreaCodeId", "ProvinceId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("AreaCodeProvinces");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Carnet", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("BackImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NaturalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NaturalId")
                        .IsUnique();

                    b.ToTable("Carnets");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Census", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("LocalityId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocalityId");

                    b.ToTable("Census");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.CommercialActivity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CommercialActivities");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreditCardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<string>("Last4CardDigits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayMode")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("ExternalId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("FonasaLevel")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalAttentionId")
                        .HasColumnType("int");

                    b.Property<int>("NaturalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SisId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearTitle")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NaturalId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.DoctorSpecialty", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DoctorSpecialties");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.EventDayWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgendaEventId")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgendaEventId");

                    b.ToTable("EventDayWeeks");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.InsuranceAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Insurance")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("InsuranceAgreements");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.InsuranceLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommuneId")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceAgreementId")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceSelector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediumDoctorId")
                        .HasColumnType("int");

                    b.Property<string>("PrestacionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.HasIndex("InsuranceAgreementId");

                    b.HasIndex("MediumDoctorId");

                    b.HasIndex("PrestacionId");

                    b.ToTable("InsuranceLocations");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Locality", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Surface")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Localities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Locality");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.MedicalAttention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId")
                        .IsUnique();

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("MedicalAttention");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.MedicalAttentionMedium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("MedicalAttentionMediums");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MedicalAttentionMedium");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.MedicalCoverage", b =>
                {
                    b.Property<int>("QuoteeId")
                        .HasColumnType("int");

                    b.Property<int>("DependantId")
                        .HasColumnType("int");

                    b.HasKey("QuoteeId", "DependantId");

                    b.HasIndex("DependantId");

                    b.ToTable("MedicalCoverages");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.MediumDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalAttentionMediumId")
                        .HasColumnType("int");

                    b.Property<bool>("OverTime")
                        .HasColumnType("bit");

                    b.Property<int>("PriceParticular")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalAttentionMediumId");

                    b.ToTable("MediumDoctors");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Patient", b =>
                {
                    b.Property<int>("NaturalId")
                        .HasColumnType("int");

                    b.Property<int>("Insurance")
                        .HasColumnType("int");

                    b.Property<string>("InsurancePassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Tramo")
                        .HasColumnType("int");

                    b.HasKey("NaturalId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("BanmedicaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Place", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommuneId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Polygon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LocalityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocalityId");

                    b.ToTable("Polygons");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Prestacion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Copago")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Prestacions");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Arrived")
                        .HasColumnType("bit");

                    b.Property<int?>("BondId")
                        .HasColumnType("int");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalAttentionId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgendaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgendaId");

                    b.HasIndex("ReservationId")
                        .IsUnique()
                        .HasFilter("[ReservationId] IS NOT NULL");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Vertex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PolygonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PolygonId");

                    b.ToTable("Vertices");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Commune", b =>
                {
                    b.HasBaseType("ConsultaMD.Models.Entities.Locality");

                    b.Property<int?>("ElectoralDistrict")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("SenatorialCircunscription")
                        .HasColumnType("int");

                    b.HasIndex("ProvinceId");

                    b.HasDiscriminator().HasValue("Commune");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Province", b =>
                {
                    b.HasBaseType("ConsultaMD.Models.Entities.Locality");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasIndex("RegionId");

                    b.HasDiscriminator().HasValue("Province");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Region", b =>
                {
                    b.HasBaseType("ConsultaMD.Models.Entities.Locality");

                    b.HasDiscriminator().HasValue("Region");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.HomeVisit", b =>
                {
                    b.HasBaseType("ConsultaMD.Models.Entities.MedicalAttentionMedium");

                    b.HasDiscriminator().HasValue("HomeVisit");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.MedicalOffice", b =>
                {
                    b.HasBaseType("ConsultaMD.Models.Entities.MedicalAttentionMedium");

                    b.Property<string>("Appartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Block")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Floor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Office")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MedicalOffice");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.RemoteAppointment", b =>
                {
                    b.HasBaseType("ConsultaMD.Models.Entities.MedicalAttentionMedium");

                    b.HasDiscriminator().HasValue("RemoteAppointment");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Company", b =>
                {
                    b.HasBaseType("ConsultaMD.Models.Entities.Person");

                    b.Property<string>("NombreFantasia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Natural", b =>
                {
                    b.HasBaseType("ConsultaMD.Models.Entities.Person");

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("datetime2");

                    b.Property<int>("CarnetId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("FullLastFirst")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameFirst")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastFather")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastMother")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Names")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassSII")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.HasIndex("CustomerId");

                    b.HasDiscriminator().HasValue("Natural");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Agenda", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.AgendaEvent", "AgendaEvent")
                        .WithMany("Agendas")
                        .HasForeignKey("AgendaEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.AgendaEvent", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.MediumDoctor", "MediumDoctor")
                        .WithMany("AgendaEvents")
                        .HasForeignKey("MediumDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.ApplicationUser", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Natural", "Person")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("ConsultaMD.Models.Entities.ApplicationUser", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.AreaCodeProvince", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.AreaCode", "AreaCode")
                        .WithMany("AreaCodeProvinces")
                        .HasForeignKey("AreaCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultaMD.Models.Entities.Province", "Province")
                        .WithMany("AreaCodeProvinces")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Carnet", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Natural", "Natural")
                        .WithOne("Carnet")
                        .HasForeignKey("ConsultaMD.Models.Entities.Carnet", "NaturalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Census", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Locality", "Locality")
                        .WithMany("Censuses")
                        .HasForeignKey("LocalityId");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.CommercialActivity", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Company", null)
                        .WithMany("CommercialActivities")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Customer", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Person", "External")
                        .WithMany()
                        .HasForeignKey("ExternalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Doctor", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Natural", "Natural")
                        .WithOne("Doctor")
                        .HasForeignKey("ConsultaMD.Models.Entities.Doctor", "NaturalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.DoctorSpecialty", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Doctor", "Doctor")
                        .WithMany("Specialties")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultaMD.Models.Entities.Specialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.EventDayWeek", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.AgendaEvent", "AgendaEvent")
                        .WithMany("EventDayWeeks")
                        .HasForeignKey("AgendaEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.InsuranceAgreement", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Person", "Person")
                        .WithMany("InsuranceAgreements")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.InsuranceLocation", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Commune", "Commune")
                        .WithMany("InsuranceLocations")
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultaMD.Models.Entities.InsuranceAgreement", "InsuranceAgreement")
                        .WithMany("InsuranceLocations")
                        .HasForeignKey("InsuranceAgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultaMD.Models.Entities.MediumDoctor", "MediumDoctor")
                        .WithMany("InsuranceLocations")
                        .HasForeignKey("MediumDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultaMD.Models.Entities.Prestacion", "Prestacion")
                        .WithMany("InsuranceLocation")
                        .HasForeignKey("PrestacionId");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.MedicalAttention", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Doctor", "Doctor")
                        .WithOne("MedicalAttention")
                        .HasForeignKey("ConsultaMD.Models.Entities.MedicalAttention", "DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConsultaMD.Models.Entities.Reservation", "Reservation")
                        .WithOne("MedicalAttention")
                        .HasForeignKey("ConsultaMD.Models.Entities.MedicalAttention", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.MedicalAttentionMedium", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.MedicalCoverage", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Natural", "Dependant")
                        .WithMany()
                        .HasForeignKey("DependantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultaMD.Models.Entities.Patient", "Quotee")
                        .WithMany("MedicalCoverages")
                        .HasForeignKey("QuoteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.MediumDoctor", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Doctor", "Doctor")
                        .WithMany("MediumDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConsultaMD.Models.Entities.MedicalAttentionMedium", "MedicalAttentionMedium")
                        .WithMany("MediumDoctors")
                        .HasForeignKey("MedicalAttentionMediumId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Patient", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Natural", "Natural")
                        .WithOne("Patient")
                        .HasForeignKey("ConsultaMD.Models.Entities.Patient", "NaturalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Place", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Commune", "Commune")
                        .WithMany("Places")
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Polygon", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Locality", "Locality")
                        .WithMany("Polygons")
                        .HasForeignKey("LocalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Reservation", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Patient", "Patient")
                        .WithMany("Reservations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultaMD.Models.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.TimeSlot", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Agenda", "Agenda")
                        .WithMany("TimeSlots")
                        .HasForeignKey("AgendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultaMD.Models.Entities.Reservation", "Reservation")
                        .WithOne("TimeSlot")
                        .HasForeignKey("ConsultaMD.Models.Entities.TimeSlot", "ReservationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Vertex", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Polygon", "Polygon")
                        .WithMany("Vertices")
                        .HasForeignKey("PolygonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Commune", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Province", "Province")
                        .WithMany("Communes")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Province", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Region", "Region")
                        .WithMany("Provinces")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.Natural", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("ConsultaMD.Models.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("ConsultaMD.Models.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultaMD.Models.Entities.ApplicationUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultaMD.Models.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
